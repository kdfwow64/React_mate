'use strict';

var _appendChild = require('yo-yoify/lib/appendChild'),
    _setAttribute = function x(el, attr, value) {
  if (typeof attr === 'object') {
    for (var i in attr) {
      if (Object.prototype.hasOwnProperty.call(attr, i)) {
        x(el, i, attr[i]);
      }
    }

    return;
  }

  if (!attr) return;
  if (attr === 'className') attr = 'class';
  if (attr === 'htmlFor') attr = 'for';
  if (attr.slice(0, 2) === 'on') el[attr] = value;else {
    if (value === true) value = attr;
    el.setAttribute(attr, value);
  }
},
    _svgNamespace = 'http://www.w3.org/2000/svg';

var throttle = require('lodash.throttle');

function progressDetails(props) {
  var _span;

  return _span = document.createElement('span'), _appendChild(_span, [props.totalProgress || 0, '%\u30FB', props.complete, ' / ', props.inProgress, '\u30FB', props.totalUploadedSize, ' / ', props.totalSize, '\u30FB\u2191 ', props.totalSpeed, '/s\u30FB', props.totalETA]), _span;
}

var throttledProgressDetails = throttle(progressDetails, 1000, { leading: true, trailing: true });

var STATE_ERROR = 'error';
var STATE_WAITING = 'waiting';
var STATE_PREPROCESSING = 'preprocessing';
var STATE_UPLOADING = 'uploading';
var STATE_POSTPROCESSING = 'postprocessing';
var STATE_COMPLETE = 'complete';

function getUploadingState(props, files) {
  // if (props.error) {
  //   return STATE_ERROR
  // }

  if (props.isAllErrored) {
    return STATE_ERROR;
  }

  // If ALL files have been completed, show the completed state.
  if (props.isAllComplete) {
    return STATE_COMPLETE;
  }

  var state = STATE_WAITING;
  var fileIDs = Object.keys(files);
  for (var i = 0; i < fileIDs.length; i++) {
    var progress = files[fileIDs[i]].progress;
    // If ANY files are being uploaded right now, show the uploading state.
    if (progress.uploadStarted && !progress.uploadComplete) {
      return STATE_UPLOADING;
    }
    // If files are being preprocessed AND postprocessed at this time, we show the
    // preprocess state. If any files are being uploaded we show uploading.
    if (progress.preprocess && state !== STATE_UPLOADING) {
      state = STATE_PREPROCESSING;
    }
    // If NO files are being preprocessed or uploaded right now, but some files are
    // being postprocessed, show the postprocess state.
    if (progress.postprocess && state !== STATE_UPLOADING && state !== STATE_PREPROCESSING) {
      state = STATE_POSTPROCESSING;
    }
  }
  return state;
}

function calculateProcessingProgress(files) {
  // Collect pre or postprocessing progress states.
  var progresses = [];
  Object.keys(files).forEach(function (fileID) {
    var progress = files[fileID].progress;

    if (progress.preprocess) {
      progresses.push(progress.preprocess);
    }
    if (progress.postprocess) {
      progresses.push(progress.postprocess);
    }
  }

  // In the future we should probably do this differently. For now we'll take the
  // mode and message from the first fileâ€¦
  );var _progresses$ = progresses[0],
      mode = _progresses$.mode,
      message = _progresses$.message;

  var value = progresses.filter(isDeterminate).reduce(function (total, progress, index, all) {
    return total + progress.value / all.length;
  }, 0);
  function isDeterminate(progress) {
    return progress.mode === 'determinate';
  }

  return {
    mode: mode,
    message: message,
    value: value
  };
}

module.exports = function (props) {
  var _div, _uppyStatusBarActions, _div2;

  props = props || {};

  var uploadState = getUploadingState(props, props.files || {});

  var progressValue = props.totalProgress;
  var progressMode = void 0;
  var progressBarContent = void 0;
  if (uploadState === STATE_PREPROCESSING || uploadState === STATE_POSTPROCESSING) {
    var progress = calculateProcessingProgress(props.files);
    progressMode = progress.mode;
    if (progressMode === 'determinate') {
      progressValue = progress.value * 100;
    }

    progressBarContent = ProgressBarProcessing(progress);
  } else if (uploadState === STATE_COMPLETE) {
    progressBarContent = ProgressBarComplete(props);
  } else if (uploadState === STATE_UPLOADING) {
    progressBarContent = ProgressBarUploading(props);
  } else if (uploadState === STATE_ERROR) {
    progressValue = undefined;
    progressBarContent = ProgressBarError(props);
  }

  var width = typeof progressValue === 'number' ? progressValue : 100;
  var isHidden = uploadState === STATE_WAITING && props.hideUploadButton || uploadState === STATE_WAITING && !props.newFiles > 0;

  var statusBarEl = (_div2 = document.createElement('div'), _div2.setAttribute('aria-hidden', '' + String(isHidden) + ''), _div2.setAttribute('class', 'UppyStatusBar is-' + String(uploadState) + ''), _appendChild(_div2, [' ', (_div = document.createElement('div'), _div.setAttribute('style', 'width: ' + String(width) + '%'), _div.setAttribute('role', 'progressbar'), _div.setAttribute('aria-valuemin', '0'), _div.setAttribute('aria-valuemax', '100'), _setAttribute(_div, progressValue ? { 'aria-valuenow': progressValue } : {}, progressValue ? { 'aria-valuenow': progressValue } : {}), _div.setAttribute('class', 'UppyStatusBar-progress ' + String(progressMode ? 'is-' + progressMode : '') + ''), _div), ' ', progressBarContent, ' ', (_uppyStatusBarActions = document.createElement('div'), _uppyStatusBarActions.setAttribute('class', 'UppyStatusBar-actions'), _appendChild(_uppyStatusBarActions, [' ', props.newFiles && !props.hideUploadButton ? UploadBtn(props) : '', ' ', props.error ? RetryBtn(props) : '', ' ']), _uppyStatusBarActions), ' ']), _div2);

  // if (progressValue) {
  //   statusBarEl.querySelector('.UppyStatusBar-progress').setAttribute('aria-valuenow', progressValue)
  // }

  return statusBarEl;
};

var UploadBtn = function UploadBtn(props) {
  var _uppyStatusBarActionBtn;

  return _uppyStatusBarActionBtn = document.createElement('button'), _uppyStatusBarActionBtn.setAttribute('type', 'button'), _uppyStatusBarActionBtn.setAttribute('aria-label', '' + String(props.i18n('uploadXFiles', { smart_count: props.newFiles })) + ''), _uppyStatusBarActionBtn.onclick = props.startUpload, _uppyStatusBarActionBtn.setAttribute('class', 'UppyStatusBar-actionBtn UppyStatusBar-actionBtn--upload'), _appendChild(_uppyStatusBarActionBtn, [' ', props.inProgress ? props.i18n('uploadXNewFiles', { smart_count: props.newFiles }) : props.i18n('uploadXFiles', { smart_count: props.newFiles }), ' ']), _uppyStatusBarActionBtn;
};

var RetryBtn = function RetryBtn(props) {
  var _uppyStatusBarActionBtn2;

  return _uppyStatusBarActionBtn2 = document.createElement('button'), _uppyStatusBarActionBtn2.setAttribute('type', 'button'), _uppyStatusBarActionBtn2.setAttribute('aria-label', '' + String(props.i18n('retryUpload')) + ''), _uppyStatusBarActionBtn2.onclick = props.retryAll, _uppyStatusBarActionBtn2.setAttribute('class', 'UppyStatusBar-actionBtn UppyStatusBar-actionBtn--retry'), _appendChild(_uppyStatusBarActionBtn2, [' ', props.i18n('retry'), ' ']), _uppyStatusBarActionBtn2;
};

var ProgressBarProcessing = function ProgressBarProcessing(props) {
  var _uppyStatusBarContent;

  var value = Math.round(props.value * 100);

  return _uppyStatusBarContent = document.createElement('div'), _uppyStatusBarContent.setAttribute('class', 'UppyStatusBar-content'), _appendChild(_uppyStatusBarContent, [' ', props.mode === 'determinate' ? value + '%\u30FB' : '', ' ', props.message, ' ']), _uppyStatusBarContent;
};

var ProgressBarUploading = function ProgressBarUploading(props) {
  var _uppyStatusBarContent2, _div3, _div4;

  return _uppyStatusBarContent2 = document.createElement('div'), _uppyStatusBarContent2.setAttribute('class', 'UppyStatusBar-content'), _appendChild(_uppyStatusBarContent2, [' ', props.isUploadStarted && !props.isAllComplete ? !props.isAllPaused ? (_div3 = document.createElement('div'), _div3.setAttribute('title', 'Uploading'), _appendChild(_div3, [pauseResumeButtons(props), ' Uploading... ', throttledProgressDetails(props)]), _div3) : (_div4 = document.createElement('div'), _div4.setAttribute('title', 'Paused'), _appendChild(_div4, [pauseResumeButtons(props), ' Paused\u30FB', props.totalProgress, '%']), _div4) : null, ' ']), _uppyStatusBarContent2;
};

var ProgressBarComplete = function ProgressBarComplete(_ref) {
  var _path, _uppyStatusBarStatusIndicator, _span2, _uppyStatusBarContent3;

  var totalProgress = _ref.totalProgress,
      i18n = _ref.i18n;

  return _uppyStatusBarContent3 = document.createElement('div'), _uppyStatusBarContent3.setAttribute('role', 'status'), _uppyStatusBarContent3.setAttribute('class', 'UppyStatusBar-content'), _appendChild(_uppyStatusBarContent3, [' ', (_span2 = document.createElement('span'), _span2.setAttribute('title', 'Complete'), _appendChild(_span2, [' ', (_uppyStatusBarStatusIndicator = document.createElementNS(_svgNamespace, 'svg'), _uppyStatusBarStatusIndicator.setAttribute('aria-hidden', 'true'), _uppyStatusBarStatusIndicator.setAttribute('width', '18'), _uppyStatusBarStatusIndicator.setAttribute('height', '17'), _uppyStatusBarStatusIndicator.setAttribute('viewBox', '0 0 23 17'), _uppyStatusBarStatusIndicator.setAttribute('class', 'UppyStatusBar-statusIndicator UppyIcon'), _appendChild(_uppyStatusBarStatusIndicator, [' ', (_path = document.createElementNS(_svgNamespace, 'path'), _path.setAttribute('d', 'M8.944 17L0 7.865l2.555-2.61 6.39 6.525L20.41 0 23 2.645z'), _path), ' ']), _uppyStatusBarStatusIndicator), ' ', i18n('uploadComplete'), '\u30FB', totalProgress, '% ']), _span2), ' ']), _uppyStatusBarContent3;
};

var ProgressBarError = function ProgressBarError(_ref2) {
  var _strong, _span3, _uppyStatusBarDetails, _uppyStatusBarContent4;

  var error = _ref2.error,
      retryAll = _ref2.retryAll,
      i18n = _ref2.i18n;

  return _uppyStatusBarContent4 = document.createElement('div'), _uppyStatusBarContent4.setAttribute('role', 'alert'), _uppyStatusBarContent4.setAttribute('class', 'UppyStatusBar-content'), _appendChild(_uppyStatusBarContent4, [' ', (_strong = document.createElement('strong'), _appendChild(_strong, [i18n('uploadFailed'), '.']), _strong), ' ', (_span3 = document.createElement('span'), _appendChild(_span3, [i18n('pleasePressRetry')]), _span3), ' ', (_uppyStatusBarDetails = document.createElement('span'), _uppyStatusBarDetails.setAttribute('data-balloon', '' + String(error) + ''), _uppyStatusBarDetails.setAttribute('data-balloon-pos', 'up'), _uppyStatusBarDetails.setAttribute('data-balloon-length', 'large'), _uppyStatusBarDetails.setAttribute('class', 'UppyStatusBar-details'), _uppyStatusBarDetails.textContent = '?', _uppyStatusBarDetails), ' ']), _uppyStatusBarContent4;
};

var pauseResumeButtons = function pauseResumeButtons(props) {
  var _uppyStatusBarStatusIndicator2, _path2, _uppyIcon, _path3, _uppyIcon2, _path4, _uppyIcon3;

  var resumableUploads = props.resumableUploads,
      isAllPaused = props.isAllPaused,
      i18n = props.i18n;

  var title = resumableUploads ? isAllPaused ? i18n('resumeUpload') : i18n('pauseUpload') : i18n('cancelUpload');

  return _uppyStatusBarStatusIndicator2 = document.createElement('button'), _uppyStatusBarStatusIndicator2.setAttribute('title', '' + String(title) + ''), _uppyStatusBarStatusIndicator2.setAttribute('type', 'button'), _uppyStatusBarStatusIndicator2.onclick = function () {
    return togglePauseResume(props);
  }, _uppyStatusBarStatusIndicator2.setAttribute('class', 'UppyStatusBar-statusIndicator'), _appendChild(_uppyStatusBarStatusIndicator2, [' ', resumableUploads ? isAllPaused ? (_uppyIcon = document.createElementNS(_svgNamespace, 'svg'), _uppyIcon.setAttribute('aria-hidden', 'true'), _uppyIcon.setAttribute('width', '15'), _uppyIcon.setAttribute('height', '17'), _uppyIcon.setAttribute('viewBox', '0 0 11 13'), _uppyIcon.setAttribute('class', 'UppyIcon'), _appendChild(_uppyIcon, [' ', (_path2 = document.createElementNS(_svgNamespace, 'path'), _path2.setAttribute('d', 'M1.26 12.534a.67.67 0 0 1-.674.012.67.67 0 0 1-.336-.583v-11C.25.724.38.5.586.382a.658.658 0 0 1 .673.012l9.165 5.5a.66.66 0 0 1 .325.57.66.66 0 0 1-.325.573l-9.166 5.5z'), _path2), ' ']), _uppyIcon) : (_uppyIcon2 = document.createElementNS(_svgNamespace, 'svg'), _uppyIcon2.setAttribute('aria-hidden', 'true'), _uppyIcon2.setAttribute('width', '16'), _uppyIcon2.setAttribute('height', '17'), _uppyIcon2.setAttribute('viewBox', '0 0 12 13'), _uppyIcon2.setAttribute('class', 'UppyIcon'), _appendChild(_uppyIcon2, [' ', (_path3 = document.createElementNS(_svgNamespace, 'path'), _path3.setAttribute('d', 'M4.888.81v11.38c0 .446-.324.81-.722.81H2.722C2.324 13 2 12.636 2 12.19V.81c0-.446.324-.81.722-.81h1.444c.398 0 .722.364.722.81zM9.888.81v11.38c0 .446-.324.81-.722.81H7.722C7.324 13 7 12.636 7 12.19V.81c0-.446.324-.81.722-.81h1.444c.398 0 .722.364.722.81z'), _path3), ' ']), _uppyIcon2) : (_uppyIcon3 = document.createElementNS(_svgNamespace, 'svg'), _uppyIcon3.setAttribute('aria-hidden', 'true'), _uppyIcon3.setAttribute('width', '16px'), _uppyIcon3.setAttribute('height', '16px'), _uppyIcon3.setAttribute('viewBox', '0 0 19 19'), _uppyIcon3.setAttribute('class', 'UppyIcon'), _appendChild(_uppyIcon3, [' ', (_path4 = document.createElementNS(_svgNamespace, 'path'), _path4.setAttribute('d', 'M17.318 17.232L9.94 9.854 9.586 9.5l-.354.354-7.378 7.378h.707l-.62-.62v.706L9.318 9.94l.354-.354-.354-.354L1.94 1.854v.707l.62-.62h-.706l7.378 7.378.354.354.354-.354 7.378-7.378h-.707l.622.62v-.706L9.854 9.232l-.354.354.354.354 7.378 7.378.708-.707-7.38-7.378v.708l7.38-7.38.353-.353-.353-.353-.622-.622-.353-.353-.354.352-7.378 7.38h.708L2.56 1.23 2.208.88l-.353.353-.622.62-.353.355.352.353 7.38 7.38v-.708l-7.38 7.38-.353.353.352.353.622.622.353.353.354-.353 7.38-7.38h-.708l7.38 7.38z'), _path4), ' ']), _uppyIcon3), ' ']), _uppyStatusBarStatusIndicator2;
};

var togglePauseResume = function togglePauseResume(props) {
  if (props.isAllComplete) return;

  if (!props.resumableUploads) {
    return props.cancelAll();
  }

  if (props.isAllPaused) {
    return props.resumeAll();
  }

  return props.pauseAll();
};
//# sourceMappingURL=StatusBar.js.map