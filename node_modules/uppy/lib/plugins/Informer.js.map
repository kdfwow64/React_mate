{"version":3,"sources":["../../src/plugins/Informer.js"],"names":["Plugin","require","module","exports","core","opts","type","id","title","defaultOptions","typeColors","info","text","bg","warning","error","success","render","bind","state","isHidden","message","details","style","install","target","mount"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,SAASC,QAAQ,UAAR,CAAf;;;AAGA;;;;;;;AAOAC,OAAOC,OAAP;AAAA;;AACE,oBAAaC,IAAb,EAAmBC,IAAnB,EAAyB;AAAA;;AAAA,iDACvB,mBAAMD,IAAN,EAAYC,IAAZ,CADuB;;AAEvB,UAAKC,IAAL,GAAY,mBAAZ;AACA,UAAKC,EAAL,GAAU,MAAKF,IAAL,CAAUE,EAAV,IAAgB,UAA1B;AACA,UAAKC,KAAL,GAAa,UAAb;AACA;;AAEA;AACA,QAAMC,iBAAiB;AACrBC,kBAAY;AACVC,cAAM;AACJC,gBAAM,MADF;AAEJC,cAAI;AAFA,SADI;AAKVC,iBAAS;AACPF,gBAAM,MADC;AAEPC,cAAI;AAFG,SALC;AASVE,eAAO;AACLH,gBAAM,MADD;AAELC,cAAI;AAFC,SATG;AAaVG,iBAAS;AACPJ,gBAAM,MADC;AAEPC,cAAI;AAFG;AAbC;;AAoBd;AArBuB,KAAvB,CAsBA,MAAKR,IAAL,GAAY,SAAc,EAAd,EAAkBI,cAAlB,EAAkCJ,IAAlC,CAAZ;;AAEA,UAAKY,MAAL,GAAc,MAAKA,MAAL,CAAYC,IAAZ,OAAd;AAhCuB;AAiCxB;;AAlCH,qBAoCED,MApCF,mBAoCUE,KApCV,EAoCiB;AAAA;;AAAA,sBAC8BA,MAAMR,IADpC;AAAA,QACNS,QADM,eACNA,QADM;AAAA,QACId,IADJ,eACIA,IADJ;AAAA,QACUe,OADV,eACUA,OADV;AAAA,QACmBC,OADnB,eACmBA,OADnB;;AAEb,QAAMC,+BAA6B,KAAKlB,IAAL,CAAUK,UAAV,CAAqBJ,IAArB,EAA2BO,EAAxD,iBAAsE,KAAKR,IAAL,CAAUK,UAAV,CAAqBJ,IAArB,EAA2BM,IAAjG,MAAN;;AAEA,0FAC0BW,KAD1B,uDAEgCH,QAFhC,iLAIMC,OAJN,OAKMC,kGAAqC,KAAKjB,IAAL,CAAUK,UAAV,CAAqBJ,IAArB,EAA2BO,EAAhE,wDACqCS,OADrC,6IAG6D,IARnE;AAWD,GAnDH;;AAAA,qBAqDEE,OArDF,sBAqDa;AACT,QAAMC,SAAS,KAAKpB,IAAL,CAAUoB,MAAzB;AACA,QAAIA,MAAJ,EAAY;AACV,WAAKC,KAAL,CAAWD,MAAX,EAAmB,IAAnB;AACD;AACF,GA1DH;;AAAA;AAAA,EAAwCzB,MAAxC","file":"Informer.js","sourcesContent":["const Plugin = require('./Plugin')\nconst html = require('yo-yo')\n\n/**\n * Informer\n * Shows rad message bubbles\n * used like this: `uppy.info('hello world', 'info', 5000)`\n * or for errors: `uppy.info('Error uploading img.jpg', 'error', 5000)`\n *\n */\nmodule.exports = class Informer extends Plugin {\n  constructor (core, opts) {\n    super(core, opts)\n    this.type = 'progressindicator'\n    this.id = this.opts.id || 'Informer'\n    this.title = 'Informer'\n    // this.timeoutID = undefined\n\n    // set default options\n    const defaultOptions = {\n      typeColors: {\n        info: {\n          text: '#fff',\n          bg: '#000'\n        },\n        warning: {\n          text: '#fff',\n          bg: '#F6A623'\n        },\n        error: {\n          text: '#fff',\n          bg: '#e74c3c'\n        },\n        success: {\n          text: '#fff',\n          bg: '#7ac824'\n        }\n      }\n    }\n\n    // merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    this.render = this.render.bind(this)\n  }\n\n  render (state) {\n    const {isHidden, type, message, details} = state.info\n    const style = `background-color: ${this.opts.typeColors[type].bg}; color: ${this.opts.typeColors[type].text};`\n\n    return html`<div class=\"Uppy UppyInformer\" \n                     style=\"${style}\" \n                     aria-hidden=\"${isHidden}\" >\n      <p role=\"alert\">\n        ${message} \n        ${details ? html`<span style=\"color: ${this.opts.typeColors[type].bg}\" \n                               data-balloon=\"${details}\" \n                               data-balloon-pos=\"up\" \n                               data-balloon-length=\"large\">?</span>` : null}\n      </p>\n    </div>`\n  }\n\n  install () {\n    const target = this.opts.target\n    if (target) {\n      this.mount(target, this)\n    }\n  }\n}\n"]}